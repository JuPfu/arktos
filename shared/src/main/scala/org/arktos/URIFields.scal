package org.arktos

import shapeless.labelled.FieldType
import shapeless.{HList, HNil, ::, Poly1, LabelledGeneric, Witness}
import shapeless.ops.record.{Keys, Selector, Values}
import shapeless.HNil
import shapeless.LabelledGeneric
import shapeless.Poly1
import shapeless._
import shapeless.ops.record.{Selector, Fields}
import shapeless._, shapeless.ops.record.{Values, Keys, Selector}, record._, syntax.singleton._
import shapeless.{Witness, HList}
import shapeless.ops.record.{Values, Keys, Selector}
import shapeless.ops.record._
import shapeless.syntax.singleton._
import shapeless.record._
import shapeless._


/**
  * Created by jp on 05.03.16.
  */
object URIFields {

  import shapeless._, record._ , ops.record._

    type wScheme[L <: HList]=Selector.Aux[L,Witness.`Scheme`.T, String]
    type wUsername[L <: HList]=Selector.Aux[L,Witness.`Username`.T, String]
    type wQuery[L <: HList]=Selector.Aux[L,Witness.`Query`.T, String]
  type wHost[L <: HList]=Selector.Aux[L,Witness.`Host`.T, String]
  type wPort[L <: HList]=Selector.Aux[L,Witness.`Port`.T, String]
  type wIPV6Address[L <: HList]=Selector.Aux[L,Witness.`IPV6Address`.T, String]
  type wIPV6Addressz[L <: HList]=Selector.Aux[L,Witness.`IPV6Addressz`.T, String]
  type wZoneid[L <: HList]=Selector.Aux[L,Witness.`Zoneid`.T, String]


 // type wIPv6Address[L <: HList]=Selector.Aux[L,Witness.`URI_IPv6Address`.T, String]

  /*
  type SchemeRec = FieldType[Witness.`'scheme`.T, String]
  type UsernameRec = FieldType[Witness.`'username`.T, String]
  type QueryRec = FieldType[Witness.`'query`.T, List[(String, String)]]

  val genScheme1 = LabelledGeneric[Scheme]
  */

  val uritypeW = Witness(URIType)
  val schemeW = Witness(Scheme)
  val protocolW = Witness(Protocol)
  val usernameW = Witness(Username)
  val passwordW = Witness(Password)
  val userinfoW = Witness(Userinfo)
  val hostnameW = Witness(Hostname)
  val portW = Witness(Port)
  val hostW = Witness(Host)
  val authorityW = Witness(Authority)
  val originW = Witness(Origin)
  val pathW = Witness(Path)
  val ipliteralW = Witness(IPLiteral)
  val ipv6AddressW = Witness(IPV6Address)
  val ipv6AddresszW = Witness(IPV6Addressz)
  val zoneidW = Witness(Zoneid)
  val queryW = Witness(Query)
  val fragmentW = Witness(Fragment)
  val rawfragmentW = Witness(RawFragment)
  val hashW = Witness(Hash)
  val resourceW = Witness(Resource)
  val uriW = Witness(URI)

  implicit def getScheme[L <: HList](l: L)(implicit sx: wScheme[L]): String = sx(l)
  implicit def getUsername[L <: HList](l: L)(implicit ux: wUsername[L]): String = ux(l)
  implicit def getQuery[L <: HList](l: L)(implicit qx: wQuery[L]): String = qx(l)
  implicit def getHost[L <: HList](l: L)(implicit qx: wHost[L]): String = qx(l)
  implicit def getZoneid[L <: HList](l: L)(implicit qx: wZoneid[L]): String = qx(l)
  implicit def getIPV6Address[L <: HList](l: L)(implicit qx: wIPV6Address[L]): String = qx(l)
  implicit def getIPV6Addressz[L <: HList](l: L)(implicit qx: wIPV6Addressz[L]): String = qx(l)


  implicit def getKeys[B <: HList, K <: HList, V <: HList](b : B)
                                                 (implicit
                                                  keys: Keys.Aux[B, K],
                                                  values: Values.Aux[B, V]) = {

    println("keys: "+b.keys)
    println
  }

}
